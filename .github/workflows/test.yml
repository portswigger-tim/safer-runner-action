name: Test Safer Runner Action

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-analyze-mode:
    name: Test Analyze Mode
    runs-on: ubuntu-latest
    steps:
      - name: Debug runner user information
        run: |
          echo "=== Runner User Information ==="
          echo "Current user:"
          whoami
          echo ""
          echo "User ID:"
          id
          echo ""
          echo "Groups:"
          groups
          echo ""
          echo "Detailed group membership:"
          id -Gn
          echo ""
          echo "Sudo test (should work before action):"
          sudo echo "Sudo is working"

      - name: Apply Safer Runner Action (Analyze Mode)
        uses: portswigger-tim/safer-runner-action@main
        with:
          mode: 'analyze'
          allowed-domains: 'httpbin.org api.github.com'

      - name: Output sudoers configuration
        run: |
          echo "=== Sudoers Configuration ==="
          echo "Main sudoers file:"
          sudo cat /etc/sudoers
          echo ""
          echo "Sudoers.d directory contents:"
          sudo ls -la /etc/sudoers.d/
          echo ""
          echo "Individual sudoers.d files:"
          for file in /etc/sudoers.d/*; do
            if [ -f "$file" ]; then
              echo "--- $file ---"
              sudo cat "$file"
              echo ""
            fi
          done

          echo ""
          echo "=== Runner Sudoers File Content ==="
          sudo cat /etc/sudoers.d/runner

      - name: Check DNS log file permissions
        run: |
          echo "=== DNS Log File Permissions ==="
          echo "Pre-hook DNS log:"
          ls -l /var/log/safer-runner/pre-dns.log || echo "Pre-hook DNS log not found"
          echo ""
          echo "Main action DNS log:"
          ls -l /var/log/safer-runner/main-dns.log || echo "Main action DNS log not found"

      - name: Test GitHub domain access
        run: |
          echo "Testing GitHub domain access..."
          curl -I https://api.github.com/user || { echo "GitHub API failed"; exit 1; }
          curl -I https://github.com || { echo "GitHub main failed"; exit 1; }
      
      - name: Test custom allowed domain
        run: |
          echo "Testing custom allowed domain..."
          curl -I https://httpbin.org/get || { echo "Custom domain failed"; exit 1; }

      - name: Test sudo commands for configuration advice
        run: |
          echo "Testing sudo commands (to generate configuration advice)..."
          sudo docker --version
          sudo whoami
          sudo cat /etc/os-release

      - name: Test localhost DNS resolution
        run: |
          echo "Testing localhost DNS resolution in analyze mode..."
          timeout 2 dig localhost || { echo "Localhost DNS resolution failed"; exit 1; }
      
      - name: Test unauthorized domain (should be logged but allowed)
        run: |
          echo "Testing unauthorized domain in analyze mode..."
          curl -I https://example.com || { echo "Example.com failed"; exit 1; }
      
      - name: Check logs
        run: |
          echo "=== rsyslog Configuration ==="
          echo "Checking if rsyslog configs exist:"
          ls -la /etc/rsyslog.d/10-iptables-safer-runner-*.conf 2>/dev/null || echo "rsyslog configs not found"
          if [ -f /etc/rsyslog.d/10-iptables-safer-runner-pre.conf ]; then
            echo "Pre-hook rsyslog config contents:"
            sudo cat /etc/rsyslog.d/10-iptables-safer-runner-pre.conf
          fi
          if [ -f /etc/rsyslog.d/10-iptables-safer-runner-main.conf ]; then
            echo "Main action rsyslog config contents:"
            sudo cat /etc/rsyslog.d/10-iptables-safer-runner-main.conf
          fi

          echo ""
          echo "=== rsyslog Service Status ==="
          sudo systemctl status rsyslog --no-pager || true

          echo ""
          echo "=== rsyslog Error Logs ==="
          sudo journalctl -u rsyslog -n 50 --no-pager || true

          echo ""
          echo "=== Test rsyslog Filtering ==="
          echo "Testing if rsyslog would match our patterns:"
          sudo grep -E "(Main-GitHub-Allow:|Main-User-Allow:|Main-Drop-Enforce:|Main-Allow-Analyze:)" /var/log/syslog | head -5 || echo "No matching patterns in syslog"

          echo ""
          echo "=== iptables Log File Permissions ==="
          echo "Pre-hook iptables log:"
          ls -la /var/log/safer-runner/pre-iptables.log 2>/dev/null || echo "Pre-hook iptables log not found"
          echo "Main action iptables log:"
          ls -la /var/log/safer-runner/main-iptables.log 2>/dev/null || echo "Main action iptables log not found"

          echo ""
          echo "=== Pre-hook Network Logs (from dedicated file) ==="
          if [ -f /var/log/safer-runner/pre-iptables.log ]; then
            echo "Pre-hook iptables log file found ($(wc -l < /var/log/safer-runner/pre-iptables.log) lines):"
            cat /var/log/safer-runner/pre-iptables.log | head -30
          else
            echo "Pre-hook iptables log file not found at /var/log/safer-runner/pre-iptables.log"
            echo "Checking syslog fallback:"
            sudo grep -E 'Pre-GitHub-Allow: |Pre-User-Allow: |Pre-Allow-Analyze: ' /var/log/syslog | tail -20 || echo "No Pre- logs in syslog either"
          fi

          echo ""
          echo "=== Main Action Network Logs (from dedicated file) ==="
          if [ -f /var/log/safer-runner/main-iptables.log ]; then
            echo "Main action iptables log file found ($(wc -l < /var/log/safer-runner/main-iptables.log) lines):"
            cat /var/log/safer-runner/main-iptables.log | head -30
          else
            echo "Main action iptables log file not found at /var/log/safer-runner/main-iptables.log"
            echo "Checking syslog fallback:"
            sudo grep -E 'Main-GitHub-Allow: |Main-User-Allow: |Main-Allow-Analyze: |Main-Drop-Enforce: ' /var/log/syslog | tail -20 || echo "No Main- logs in syslog either"
          fi

          echo ""
          echo "=== Raw syslog iptables entries (all prefixes) ==="
          sudo grep -E 'Pre-|Main-' /var/log/syslog | grep -E 'GitHub-Allow:|User-Allow:|Allow-Analyze:|Drop-Enforce:' | tail -30 || echo "No iptables logs in syslog"

          echo ""
          echo "=== Pre-hook DNS Logs ==="
          if [ -f /var/log/safer-runner/pre-dns.log ]; then
            echo "Pre-hook DNS logs file found:"
            grep -E 'query\[A\]|reply|NXDOMAIN' /var/log/safer-runner/pre-dns.log | tail -30 || echo "Could not read pre-hook DNS logs"
          else
            echo "Pre-hook DNS logs file not found at /var/log/safer-runner/pre-dns.log"
          fi

          echo ""
          echo "=== Main Action DNS Logs ==="
          if [ -f /var/log/safer-runner/main-dns.log ]; then
            echo "Main action DNS logs file found:"
            grep -E 'query\[A\]|reply|NXDOMAIN' /var/log/safer-runner/main-dns.log | tail -30 || echo "Could not read main action DNS logs"
          else
            echo "Main action DNS logs file not found at /var/log/safer-runner/main-dns.log"
          fi

          echo ""
          echo "=== Sudo Usage Logs ==="
          echo "Pre-hook sudo log file:"
          ls -lh /var/log/safer-runner/pre-sudo.log 2>/dev/null || echo "Pre-hook sudo log file not found"
          if [ -f /var/log/safer-runner/pre-sudo.log ]; then
            echo "Pre-hook sudo log contents (last 20 lines):"
            tail -20 /var/log/safer-runner/pre-sudo.log 2>/dev/null || echo "Could not read pre-hook sudo log"
          fi
          echo ""
          echo "Main action sudo log file:"
          ls -lh /var/log/safer-runner/main-sudo.log 2>/dev/null || echo "Main action sudo log file not found"
          if [ -f /var/log/safer-runner/main-sudo.log ]; then
            echo "Main action sudo log contents (last 20 lines):"
            tail -20 /var/log/safer-runner/main-sudo.log 2>/dev/null || echo "Could not read main action sudo log"
            echo ""
            echo "Count of sudo commands in main log:"
            wc -l /var/log/safer-runner/main-sudo.log 2>/dev/null || echo "Could not count sudo commands"
          fi

      - name: Verify job summary was created
        run: |
          echo "✅ Job summary should be automatically generated by post-action"
          echo "📊 Check the job summary section below for Network Access Provenance table"

  test-enforce-mode:
    name: Test Enforce Mode
    runs-on: ubuntu-latest
    steps:
      - name: Apply Safer Runner Action (Enforce Mode)
        uses: portswigger-tim/safer-runner-action@main
        with:
          mode: 'enforce'
          allowed-domains: 'httpbin.org'
      
      - name: Test GitHub domain access (should work)
        run: |
          echo "Testing GitHub domain access in enforce mode..."
          curl -I https://api.github.com/user || { echo "GitHub API blocked (unexpected)"; exit 1; }
          curl -I https://github.com || { echo "GitHub main blocked (unexpected)"; exit 1; }
      
      - name: Test custom allowed domain (should work)
        run: |
          echo "Testing custom allowed domain..."
          curl -I https://httpbin.org/get || { echo "Custom domain blocked (unexpected)"; exit 1; }
      
      - name: Test localhost DNS resolution
        run: |
          echo "Testing localhost DNS resolution in enforce mode..."
          timeout 2 dig localhost || { echo "Localhost DNS resolution failed"; exit 1; }
      
      - name: Test unauthorized domain (should be blocked)
        run: |
          echo "Testing unauthorized domain in enforce mode..."
          timeout 10 curl -I https://example.com && echo "ERROR: Unauthorized domain was allowed!" || echo "SUCCESS: Unauthorized domain blocked as expected"
      
      - name: Test malicious domain blocking (should be blocked)  
        run: |
          echo "Testing malicious domain blocking..."
          timeout 10 curl -I https://malicious-test-domain.com && echo "ERROR: Malicious domain was allowed!" || echo "SUCCESS: Malicious domain blocked as expected"
      
      - name: Check security logs
        run: |
          echo "=== Pre-hook Network Logs ==="
          sudo grep -E 'Pre-GitHub-Allow: |Pre-User-Allow: |Pre-Allow-Analyze: ' /var/log/syslog | tail -20 || echo "No Pre- logs found"

          echo ""
          echo "=== Main Action Network Logs ==="
          sudo grep -E 'Main-GitHub-Allow: |Main-User-Allow: |Main-Drop-Enforce: ' /var/log/syslog | tail -30 || echo "No main action logs found"

          echo ""
          echo "=== Pre-hook DNS Logs ==="
          if [ -f /var/log/safer-runner/pre-dns.log ]; then
            echo "Pre-hook DNS logs file found:"
            grep -E 'query\[A\]|reply|NXDOMAIN' /var/log/safer-runner/pre-dns.log | tail -30 || echo "Could not read pre-hook DNS logs"
          else
            echo "Pre-hook DNS logs file not found at /var/log/safer-runner/pre-dns.log"
          fi

          echo ""
          echo "=== Main Action DNS Logs ==="
          if [ -f /var/log/safer-runner/main-dns.log ]; then
            echo "Main action DNS logs file found:"
            grep -E 'query\[A\]|reply|NXDOMAIN' /var/log/safer-runner/main-dns.log | tail -30 || echo "Could not read main action DNS logs"
          else
            echo "Main action DNS logs file not found at /var/log/safer-runner/main-dns.log"
          fi

      - name: Verify job summary was created
        run: |
          echo "✅ Job summary should be automatically generated by post-action"
          echo "📊 Check the job summary section below for Network Access Provenance table"
          echo "🔒 Should show blocked connections in enforce mode"

  test-github-actions-compatibility:
    name: Test GitHub Actions Compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Apply Safer Runner Action (Enforce Mode)
        uses: portswigger-tim/safer-runner-action@main
        with:
          mode: 'enforce'

      - name: Test Actions checkout (uses GitHub domains)
        uses: actions/checkout@v5
        with:
          repository: actions/hello-world-javascript-action
          path: test-repo

      - name: Test artifact upload/download
        uses: actions/upload-artifact@v4
        with:
          name: test-artifact
          path: test-repo/README.md

      - name: Download test artifact
        uses: actions/download-artifact@v4
        with:
          name: test-artifact
          path: downloaded/

      - name: Verify artifact was downloaded
        run: |
          ls -la downloaded/
          cat downloaded/README.md | head -5
      
      - name: Check GitHub Actions logs
        run: |
          echo "=== Pre-hook Network Logs ==="
          sudo grep -E 'Pre-GitHub-Allow: |Pre-User-Allow: ' /var/log/syslog | tail -15 || echo "No Pre- logs found"

          echo ""
          echo "=== Main Action GitHub Domain Access Logs ==="
          sudo grep -E 'Main-GitHub-Allow: ' /var/log/syslog | tail -20 || echo "No GitHub domain access logs found"

          echo ""
          echo "=== Pre-hook DNS Logs ==="
          if [ -f /var/log/safer-runner/pre-dns.log ]; then
            grep -E 'query\[A\]|reply|NXDOMAIN' /var/log/safer-runner/pre-dns.log | tail -20 || echo "Could not read pre-hook DNS logs"
          else
            echo "Pre-hook DNS logs file not found at /var/log/safer-runner/pre-dns.log"
          fi

          echo ""
          echo "=== Main Action DNS Logs ==="
          if [ -f /var/log/safer-runner/main-dns.log ]; then
            grep -E 'query\[A\]|reply|NXDOMAIN' /var/log/safer-runner/main-dns.log | tail -20 || echo "Could not read main action DNS logs"
          else
            echo "Main action DNS logs file not found at /var/log/safer-runner/main-dns.log"
          fi

  test-edge-cases:
    name: Test Edge Cases
    runs-on: ubuntu-latest
    services:
      nginx:
        image: nginx:alpine
        ports:
          - 80/tcp
        options: --restart always
    steps:
      - name: Apply Safer Runner Action (Enforce Mode)
        uses: portswigger-tim/safer-runner-action@main
        with:
          mode: 'enforce'
          allowed-domains: 'api.github.com httpbin.org'

      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Test DNS resolution
        run: |
          echo "Testing DNS resolution..."
          dig api.github.com || echo "DNS resolution failed"
          dig httpbin.org || echo "Custom DNS resolution failed"
      
      - name: Test multiple protocols
        run: |
          echo "Testing HTTPS..."
          curl -I https://api.github.com || echo "HTTPS failed"
          
          echo "Testing HTTP (if allowed)..."
          curl -I http://httpbin.org/get || echo "HTTP failed (expected in enforce mode)"
      
      - name: Test localhost access
        run: |
          echo "Testing localhost DNS resolution..."
          timeout 5 dig localhost || { echo "Localhost DNS resolution failed"; exit 1; }

          echo "Testing localhost access to nginx service..."
          timeout 5 curl -I http://127.0.0.1:${{ job.services.nginx.ports['80'] }} || { echo "Localhost nginx failed"; exit 1; }

          echo "Testing localhost access to different port (should fail)..."
          timeout 5 curl -I http://127.0.0.1:9999 && echo "ERROR: Unexpected service responded!" || echo "SUCCESS: No service on port 9999 as expected"

      - name: Test direct IP address blocking
        run: |
          echo "Testing direct IP address communication blocking..."

          echo "Testing DNS query to Google DNS server 8.8.8.8 (should be blocked)..."
          timeout 1 dig @8.8.8.8 google.com && { echo "ERROR: Direct IP DNS query was allowed!"; exit 1; } || echo "SUCCESS: Direct IP DNS query blocked as expected"

          echo "Testing HTTP request to direct IP address (should be blocked)..."
          timeout 1 curl -I http://8.8.8.8 && { echo "ERROR: Direct IP HTTP request was allowed!"; exit 1; } || echo "SUCCESS: Direct IP HTTP request blocked as expected"

          echo "Testing HTTPS request to direct IP address (should be blocked)..."
          timeout 1 curl -I https://1.1.1.1 && { echo "ERROR: Direct IP HTTPS request was allowed!"; exit 1; } || echo "SUCCESS: Direct IP HTTPS request blocked as expected"
      
      - name: Check localhost test logs
        if: always()
        run: |
          echo "=== Pre-hook Network Logs ==="
          sudo grep -E 'Pre-GitHub-Allow: |Pre-User-Allow: |Pre-Allow-Analyze: ' /var/log/syslog | tail -15 || echo "No Pre- logs found"

          echo ""
          echo "=== Main Action Network Logs ==="
          sudo grep -E 'Main-GitHub-Allow: |Main-User-Allow: |Main-Drop-Enforce: |Main-Allow-Analyze: ' /var/log/syslog | tail -30 || echo "No main action logs found"

          echo ""
          echo "=== Pre-hook DNS Logs ==="
          if [ -f /var/log/safer-runner/pre-dns.log ]; then
            grep -E 'query\[A\]|reply|NXDOMAIN' /var/log/safer-runner/pre-dns.log | tail -20 || echo "Could not read pre-hook DNS logs"
          else
            echo "Pre-hook DNS logs file not found at /var/log/safer-runner/pre-dns.log"
          fi

          echo ""
          echo "=== Main Action DNS Logs ==="
          if [ -f /var/log/safer-runner/main-dns.log ]; then
            grep -E 'query\[A\]|reply|NXDOMAIN' /var/log/safer-runner/main-dns.log | tail -20 || echo "Could not read main action DNS logs"
          else
            echo "Main action DNS logs file not found at /var/log/safer-runner/main-dns.log"
          fi

      - name: Final security audit
        run: |
          echo "=== Final Security Audit ==="
          echo "Network Interfaces:"
          ip link show

          echo "Routing Table:"
          ip route show

          echo "Default Gateway Interface:"
          ip route get 8.8.8.8 | grep dev

          echo "IPTables rules:"
          sudo iptables -L OUTPUT -n -v | head -20

          echo "Active IPSets:"
          sudo ipset list github | head -10 || echo "GitHub ipset empty"
          sudo ipset list user | head -10 || echo "User ipset empty"

          echo "DNS Configuration:"
          cat /etc/resolv.conf

          echo "DNSMasq status:"
          sudo systemctl status dnsmasq --no-pager -l

  test-system-integrity:
    name: Test System Integrity Validation
    runs-on: ubuntu-latest
    steps:
      - name: Apply Safer Runner Action (Analyze Mode)
        uses: portswigger-tim/safer-runner-action@main
        with:
          mode: 'analyze'
          allowed-domains: 'httpbin.org'
     

      - name: Verify baseline was captured
        run: |
          echo "=== Verifying baseline capture ==="
          if [ -f /tmp/safer-runner-validation-state.json ]; then
            echo "✅ Baseline file exists"
            echo "📋 Baseline contents:"
            sudo cat /tmp/safer-runner-validation-state.json | jq '.' || echo "Not valid JSON"
          else
            echo "❌ ERROR: Baseline file not found!"
            exit 1
          fi

      - name: Test normal operation (no tampering)
        run: |
          echo "=== Testing normal operation ==="
          echo "Making allowed network requests..."
          curl -I https://api.github.com || echo "GitHub API request failed"
          curl -I https://httpbin.org/get || echo "Custom domain request failed"

      - name: Verify system files exist
        run: |
          echo "=== Verifying critical system files ==="
          echo "Checking /etc/dnsmasq.conf..."
          if [ -f /etc/dnsmasq.conf ]; then
            echo "✅ dnsmasq.conf exists"
            echo "First 10 lines:"
            sudo head -10 /etc/dnsmasq.conf
          else
            echo "❌ ERROR: dnsmasq.conf missing!"
            exit 1
          fi

          echo "Checking /etc/resolv.conf..."
          if [ -f /etc/resolv.conf ]; then
            echo "✅ resolv.conf exists"
            cat /etc/resolv.conf
          else
            echo "❌ ERROR: resolv.conf missing!"
            exit 1
          fi

          echo "Checking systemd resolved config..."
          if [ -f /etc/systemd/resolved.conf.d/no-stub.conf ]; then
            echo "✅ no-stub.conf exists"
            sudo cat /etc/systemd/resolved.conf.d/no-stub.conf
          else
            echo "❌ ERROR: no-stub.conf missing!"
            exit 1
          fi

      - name: Test tampering detection (simulate file modification)
        run: |
          echo "=== Testing tampering detection ==="

          # Get original checksum for comparison
          echo "Original dnsmasq.conf checksum:"
          sudo sha256sum /etc/dnsmasq.conf

          # Simulate tampering by appending to dnsmasq.conf
          echo "# MALICIOUS MODIFICATION FOR TESTING" | sudo tee -a /etc/dnsmasq.conf

          echo "Modified dnsmasq.conf checksum:"
          sudo sha256sum /etc/dnsmasq.conf

          echo "File was tampered with - post-action should detect this!"

      - name: Check system logs for validation activity
        if: always()
        run: |
          echo "=== System Integrity Validation Logs ==="
          sudo grep -E 'Capturing|Verifying|integrity|baseline|checksum' /var/log/syslog | tail -20 || echo "No validation logs found in syslog"

          echo "=== Application Logs ==="
          # Look for our validation messages in GitHub Actions logs
          echo "Validation should appear in the action output above"

      - name: Final validation test
        run: |
          echo "=== Final validation summary ==="
          echo "✅ Baseline capture: Should be completed during action setup"
          echo "🔍 Tampering detection: Intentionally modified dnsmasq.conf"
          echo "📊 Validation report: Should show tampering in job summary"
          echo "🚨 Expected result: Post-action should detect and report tampering"
          echo ""
          echo "Check the job summary below for the System Integrity Validation Report!"
          echo "It should show ❌ Tampered status for /etc/dnsmasq.conf"

  test-disable-sudo:
    name: Test Disable Sudo Feature
    runs-on: ubuntu-latest
    steps:
      - name: Verify sudo works before action
        run: |
          echo "=== Testing sudo BEFORE disabling ==="
          whoami
          sudo whoami
          echo "✅ Sudo is working"

      - name: Apply Safer Runner Action with disable-sudo
        uses: portswigger-tim/safer-runner-action@main
        with:
          mode: 'analyze'
          disable-sudo: 'true'

      - name: Verify sudo is disabled after action
        run: |
          echo "=== Testing sudo AFTER disabling ==="

          echo "Attempting to run sudo command (should fail)..."
          if sudo whoami 2>&1; then
            echo "❌ ERROR: Sudo still works! It should have been disabled."
            exit 1
          else
            echo "✅ SUCCESS: Sudo is correctly disabled"
          fi

      - name: Verify Docker still works
        run: |
          echo "=== Testing Docker access (should still work) ==="
          docker --version
          docker ps
          curl -I https://google.com
          echo "✅ Docker access still works (runner user still in docker group)"

      - name: Verify log file access still works
        run: |
          echo "=== Testing log file access (should still work) ==="
          # Runner user is in 'adm' group, should be able to read some logs
          ls -la /var/log/syslog
          echo "✅ Log file access still works (runner user still in adm group)"

  test-sudo-config:
    name: Test Custom Sudo Config
    runs-on: ubuntu-latest
    steps:
      - name: Verify sudo works before action
        run: |
          echo "=== Testing sudo BEFORE restricting ==="
          sudo whoami
          sudo docker --version
          sudo npm --version
          echo "✅ Sudo is unrestricted"

      - name: Debug executable paths
        run: |
          echo "=== Finding executable paths ==="
          echo "docker: $(which docker)"
          echo "npm: $(which npm)"
          echo "whoami: $(which whoami)"
          echo "grep: $(which grep)"
          echo "cat: $(which cat)"
          echo "iptables: $(which iptables)"

      - name: Apply Safer Runner Action with custom sudo-config
        uses: portswigger-tim/safer-runner-action@main
        with:
          mode: 'analyze'
          sudo-config: |
            runner ALL=(ALL) NOPASSWD: /usr/bin/docker
            runner ALL=(ALL) NOPASSWD: /usr/local/bin/npm

      - name: Debug sudoers file after action
        run: |
          echo "=== Checking sudoers configuration ==="
          sudo cat /etc/sudoers.d/runner || echo "File not found"

      - name: Verify restricted sudo commands work
        run: |
          echo "=== Testing allowed sudo commands ==="

          echo "Testing sudo docker (should work)..."
          sudo docker --version || { echo "❌ ERROR: sudo docker failed!"; exit 1; }
          echo "✅ sudo docker works"

          echo "Testing sudo npm (should work)..."
          sudo npm --version || { echo "❌ ERROR: sudo npm failed!"; exit 1; }
          echo "✅ sudo npm works"

      - name: Verify non-allowed sudo commands fail
        run: |
          echo "=== Testing non-allowed sudo commands ==="

          echo "Testing sudo whoami (should fail)..."
          if sudo whoami 2>&1; then
            echo "❌ ERROR: sudo whoami should have been blocked!"
            exit 1
          else
            echo "✅ sudo whoami correctly blocked"
          fi

          echo "Testing sudo ls (should fail)..."
          if sudo ls /root 2>&1; then
            echo "❌ ERROR: sudo ls should have been blocked!"
            exit 1
          else
            echo "✅ sudo ls correctly blocked"
          fi

      - name: Verify Docker and other group access still works
        run: |
          echo "=== Testing non-sudo group access ==="
          docker --version
          docker ps
          echo "✅ Docker access works without sudo (via docker group)"

  test-disable-docker:
    name: Test Disable Docker Feature
    runs-on: ubuntu-latest
    steps:
      - name: Verify Docker works before action
        run: |
          echo "=== Testing Docker BEFORE disabling ==="
          whoami
          groups
          docker --version
          docker ps
          echo "✅ Docker is working"

      - name: Apply Safer Runner Action with disable-docker
        uses: portswigger-tim/safer-runner-action@main
        with:
          mode: 'analyze'
          disable-docker: 'true'

      - name: Verify Docker is disabled after action
        run: |
          echo "=== Testing Docker AFTER disabling ==="

          echo "Checking group membership..."
          groups | grep -v docker || echo "✅ Runner is not in docker group"

          echo "Attempting docker ps (should fail - requires daemon)..."
          if docker ps 2>&1; then
            echo "❌ ERROR: Docker ps still works! It should have been disabled."
            exit 1
          else
            echo "✅ SUCCESS: docker ps correctly blocked"
          fi

          echo "Attempting docker info (should fail - requires daemon)..."
          if docker info 2>&1; then
            echo "❌ ERROR: Docker info still works! It should have been disabled."
            exit 1
          else
            echo "✅ SUCCESS: docker info correctly blocked"
          fi

          echo "Note: docker --version still works (client-only command, doesn't need daemon)"
          docker --version || true

      - name: Verify sudo still works
        run: |
          echo "=== Testing sudo access (should still work) ==="
          sudo whoami
          sudo cat /etc/os-release
          echo "✅ Sudo access still works (disable-docker doesn't affect sudo)"

      - name: Verify other group memberships intact
        run: |
          echo "=== Testing other group access (should still work) ==="
          # Runner user should still be in other groups
          groups
          echo ""
          echo "Checking specific groups..."
          groups | grep adm && echo "✅ Still in adm group" || echo "❌ Not in adm group"
          groups | grep sudo && echo "✅ Still in sudo group" || echo "❌ Not in sudo group"

          # Test log file access (adm group)
          ls -la /var/log/syslog
          echo "✅ Log file access still works (runner user still in adm group)"

  test-combined-lockdown:
    name: Test Combined Lockdown (Sudo + Docker Disabled)
    runs-on: ubuntu-latest
    steps:
      - name: Verify both sudo and Docker work before action
        run: |
          echo "=== Testing BEFORE combined lockdown ==="
          echo "Sudo test:"
          sudo whoami
          echo "Docker test:"
          docker --version
          docker ps
          echo "✅ Both sudo and Docker are working"

      - name: Apply Safer Runner Action with combined lockdown
        uses: portswigger-tim/safer-runner-action@main
        with:
          mode: 'enforce'
          disable-sudo: 'true'
          disable-docker: 'true'
          allowed-domains: 'httpbin.org'

      - name: Verify both sudo and Docker are disabled
        run: |
          echo "=== Testing AFTER combined lockdown ==="

          echo "Checking sudo (should fail)..."
          if sudo whoami 2>&1; then
            echo "❌ ERROR: Sudo still works!"
            exit 1
          else
            echo "✅ Sudo is correctly disabled"
          fi

          echo "Checking Docker daemon access (should fail)..."
          if docker ps 2>&1; then
            echo "❌ ERROR: Docker ps still works!"
            exit 1
          else
            echo "✅ docker ps correctly blocked"
          fi

          if docker info 2>&1; then
            echo "❌ ERROR: Docker info still works!"
            exit 1
          else
            echo "✅ docker info correctly blocked"
          fi

          echo "Checking group membership..."
          groups
          groups | grep -v docker || echo "✅ Not in docker group"

          echo "Note: docker --version (client-only) still works:"
          docker --version || true

      - name: Verify workflow can still function
        run: |
          echo "=== Testing workflow functionality without elevated privileges ==="

          echo "Testing network access to allowed domain..."
          curl -I https://httpbin.org/get || { echo "❌ Network access failed"; exit 1; }
          echo "✅ Network access works"

          echo "Testing basic commands..."
          whoami
          pwd
          ls -la
          echo "Hello from locked-down runner" > test.txt
          cat test.txt
          echo "✅ Basic commands work"

          echo "Testing unauthorized domain is blocked..."
          timeout 5 curl -I https://example.com && echo "❌ Unauthorized domain allowed!" || echo "✅ Unauthorized domain blocked"

      - name: Summary
        run: |
          echo "=== Combined Lockdown Summary ==="
          echo "✅ Sudo access: DISABLED"
          echo "✅ Docker access: DISABLED"
          echo "✅ Network filtering: ACTIVE (enforce mode)"
          echo "✅ Workflow execution: FUNCTIONAL"
          echo ""
          echo "This demonstrates maximum security for workflows that don't need elevated privileges or containers."
