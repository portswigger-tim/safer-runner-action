name: Test Safer Runner Action

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-analyze-mode:
    name: Test Analyze Mode
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Apply Safer Runner Action (Analyze Mode)
        uses: ./
        with:
          mode: 'analyze'
          allowed-domains: 'httpbin.org api.github.com'
      
      - name: Test GitHub domain access
        run: |
          echo "Testing GitHub domain access..."
          curl -I https://api.github.com/user || { echo "GitHub API failed"; exit 1; }
          curl -I https://github.com || { echo "GitHub main failed"; exit 1; }
      
      - name: Test custom allowed domain
        run: |
          echo "Testing custom allowed domain..."
          curl -I https://httpbin.org/get || { echo "Custom domain failed"; exit 1; }
      
      - name: Test unauthorized domain (should be logged but allowed)
        run: |
          echo "Testing unauthorized domain in analyze mode..."
          curl -I https://example.com || { echo "Example.com failed"; exit 1; }
      
      - name: Check logs
        run: |
          echo "=== Firewall Logs ==="
          sudo grep -E 'GitHub-Allow: |Custom-Allow: |DNS-Analyze: |Allow-Analyze: |Dropped: ' /var/log/syslog | tail -20 || echo "No logs found"

  test-enforce-mode:
    name: Test Enforce Mode  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Apply Safer Runner Action (Enforce Mode)
        uses: ./
        with:
          mode: 'enforce'
          allowed-domains: 'httpbin.org'
      
      - name: Test GitHub domain access (should work)
        run: |
          echo "Testing GitHub domain access in enforce mode..."
          curl -I https://api.github.com/user || { echo "GitHub API blocked (unexpected)"; exit 1; }
          curl -I https://github.com || { echo "GitHub main blocked (unexpected)"; exit 1; }
      
      - name: Test custom allowed domain (should work)
        run: |
          echo "Testing custom allowed domain..."
          curl -I https://httpbin.org/get || { echo "Custom domain blocked (unexpected)"; exit 1; }
      
      - name: Test unauthorized domain (should be blocked)
        run: |
          echo "Testing unauthorized domain in enforce mode..."
          timeout 10 curl -I https://example.com && echo "ERROR: Unauthorized domain was allowed!" || echo "SUCCESS: Unauthorized domain blocked as expected"
      
      - name: Test malicious domain blocking (should be blocked)  
        run: |
          echo "Testing malicious domain blocking..."
          timeout 10 curl -I https://malicious-test-domain.com && echo "ERROR: Malicious domain was allowed!" || echo "SUCCESS: Malicious domain blocked as expected"
      
      - name: Check security logs
        run: |
          echo "=== Security Logs ==="
          sudo grep -E 'GitHub-Allow: |Custom-Allow: |Dropped: ' /var/log/syslog | tail -30 || echo "No security logs found"
          
          echo "=== DNS Logs ==="
          sudo grep -E 'reply|NXDOMAIN' /var/log/syslog | tail -10 || echo "No DNS logs found"

  test-github-actions-compatibility:
    name: Test GitHub Actions Compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Apply Safer Runner Action (Enforce Mode)
        uses: ./
        with:
          mode: 'enforce'
      
      - name: Test Actions checkout (uses GitHub domains)
        uses: actions/checkout@v4
        with:
          repository: actions/hello-world-javascript-action
          path: test-repo
      
      - name: Test artifact upload/download
        uses: actions/upload-artifact@v4
        with:
          name: test-artifact
          path: README.md
      
      - name: Download test artifact
        uses: actions/download-artifact@v4
        with:
          name: test-artifact
          path: downloaded/
      
      - name: Verify artifact was downloaded
        run: |
          ls -la downloaded/
          cat downloaded/README.md | head -5
      
      - name: Check GitHub Actions logs
        run: |
          echo "=== GitHub Actions Domain Access Logs ==="
          sudo grep 'GitHub-Allow: ' /var/log/syslog | tail -20 || echo "No GitHub domain access logs found"

  test-edge-cases:
    name: Test Edge Cases
    runs-on: ubuntu-latest
    services:
      nginx:
        image: nginx:alpine
        ports:
          - 8080:80
        options: >-
          --health-cmd "curl -f http://localhost:80 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Verify nginx service is ready
        run: |
          echo "Waiting for nginx service to be ready..."
          timeout 30 bash -c 'until curl -f http://127.0.0.1:8080 > /dev/null 2>&1; do sleep 1; done'
          echo "Nginx service is ready!"
      
      - name: Apply Safer Runner Action (Enforce Mode)
        uses: ./
        with:
          mode: 'enforce'
          allowed-domains: 'api.github.com httpbin.org'
      
      - name: Test DNS resolution
        run: |
          echo "Testing DNS resolution..."
          dig api.github.com @127.0.0.1 || echo "DNS resolution failed"
          dig httpbin.org @127.0.0.1 || echo "Custom DNS resolution failed"
      
      - name: Test multiple protocols
        run: |
          echo "Testing HTTPS..."
          curl -I https://api.github.com || echo "HTTPS failed"
          
          echo "Testing HTTP (if allowed)..."
          curl -I http://httpbin.org/get || echo "HTTP failed (expected in enforce mode)"
      
      - name: Test localhost access
        run: |
          echo "Testing localhost access to nginx service..."
          curl -I http://127.0.0.1:8080 || { echo "Localhost nginx failed"; exit 1; }
          
          echo "Testing localhost access to different port (should fail)..."
          timeout 5 curl -I http://127.0.0.1:9999 && echo "ERROR: Unexpected service responded!" || echo "SUCCESS: No service on port 9999 as expected"
      
      - name: Final security audit
        run: |
          echo "=== Final Security Audit ==="
          echo "IPTables rules:"
          sudo iptables -L OUTPUT -n -v | head -20
          
          echo "Active IPSets:"
          sudo ipset list gha | head -10 || echo "GHA ipset empty"
          sudo ipset list allowed | head -10 || echo "Allowed ipset empty"
          
          echo "DNS Configuration:"
          cat /etc/resolv.conf
          
          echo "DNSMasq status:"
          sudo systemctl status dnsmasq --no-pager -l