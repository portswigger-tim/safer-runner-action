name: Test Safer Runner Action

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-analyze-mode:
    name: Test Analyze Mode
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Apply Safer Runner Action (Analyze Mode)
        uses: ./
        with:
          mode: 'analyze'
          allowed-domains: 'httpbin.org api.github.com'
      
      - name: Test GitHub domain access
        run: |
          echo "Testing GitHub domain access..."
          curl -I https://api.github.com/user || { echo "GitHub API failed"; exit 1; }
          curl -I https://github.com || { echo "GitHub main failed"; exit 1; }
      
      - name: Test custom allowed domain
        run: |
          echo "Testing custom allowed domain..."
          curl -I https://httpbin.org/get || { echo "Custom domain failed"; exit 1; }
      
      - name: Test localhost DNS resolution
        run: |
          echo "Testing localhost DNS resolution in analyze mode..."
          timeout 2 dig localhost || { echo "Localhost DNS resolution failed"; exit 1; }
      
      - name: Test unauthorized domain (should be logged but allowed)
        run: |
          echo "Testing unauthorized domain in analyze mode..."
          curl -I https://example.com || { echo "Example.com failed"; exit 1; }
      
      - name: Check logs
        run: |
          echo "=== Firewall Logs ==="
          sudo grep -E 'GitHub-Allow: |User-Allow: |Allow-Analyze: |Drop-Enforce: ' /var/log/syslog | tail -20 || echo "No logs found"

      - name: Verify job summary was created
        run: |
          echo "✅ Job summary should be automatically generated by post-action"
          echo "📊 Check the job summary section below for Network Access Provenance table"

  test-enforce-mode:
    name: Test Enforce Mode  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Apply Safer Runner Action (Enforce Mode)
        uses: ./
        with:
          mode: 'enforce'
          allowed-domains: 'httpbin.org'
      
      - name: Test GitHub domain access (should work)
        run: |
          echo "Testing GitHub domain access in enforce mode..."
          curl -I https://api.github.com/user || { echo "GitHub API blocked (unexpected)"; exit 1; }
          curl -I https://github.com || { echo "GitHub main blocked (unexpected)"; exit 1; }
      
      - name: Test custom allowed domain (should work)
        run: |
          echo "Testing custom allowed domain..."
          curl -I https://httpbin.org/get || { echo "Custom domain blocked (unexpected)"; exit 1; }
      
      - name: Test localhost DNS resolution
        run: |
          echo "Testing localhost DNS resolution in enforce mode..."
          timeout 2 dig localhost || { echo "Localhost DNS resolution failed"; exit 1; }
      
      - name: Test unauthorized domain (should be blocked)
        run: |
          echo "Testing unauthorized domain in enforce mode..."
          timeout 10 curl -I https://example.com && echo "ERROR: Unauthorized domain was allowed!" || echo "SUCCESS: Unauthorized domain blocked as expected"
      
      - name: Test malicious domain blocking (should be blocked)  
        run: |
          echo "Testing malicious domain blocking..."
          timeout 10 curl -I https://malicious-test-domain.com && echo "ERROR: Malicious domain was allowed!" || echo "SUCCESS: Malicious domain blocked as expected"
      
      - name: Check security logs
        run: |
          echo "=== Security Logs ==="
          sudo grep -E 'GitHub-Allow: |User-Allow: |Drop-Enforce: ' /var/log/syslog | tail -30 || echo "No security logs found"
          
          echo "=== DNS Logs ==="
          sudo grep -E 'reply|NXDOMAIN' /var/log/syslog | tail -10 || echo "No DNS logs found"

      - name: Verify job summary was created
        run: |
          echo "✅ Job summary should be automatically generated by post-action"
          echo "📊 Check the job summary section below for Network Access Provenance table"
          echo "🔒 Should show blocked connections in enforce mode"

  test-github-actions-compatibility:
    name: Test GitHub Actions Compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Apply Safer Runner Action (Enforce Mode)
        uses: ./
        with:
          mode: 'enforce'
      
      - name: Test Actions checkout (uses GitHub domains)
        uses: actions/checkout@v4
        with:
          repository: actions/hello-world-javascript-action
          path: test-repo
      
      - name: Test artifact upload/download
        uses: actions/upload-artifact@v4
        with:
          name: test-artifact
          path: README.md
      
      - name: Download test artifact
        uses: actions/download-artifact@v4
        with:
          name: test-artifact
          path: downloaded/
      
      - name: Verify artifact was downloaded
        run: |
          ls -la downloaded/
          cat downloaded/README.md | head -5
      
      - name: Check GitHub Actions logs
        run: |
          echo "=== GitHub Actions Domain Access Logs ==="
          sudo grep 'GitHub-Allow: ' /var/log/syslog | tail -20 || echo "No GitHub domain access logs found"

  test-edge-cases:
    name: Test Edge Cases
    runs-on: ubuntu-latest
    services:
      nginx:
        image: nginx:alpine
        ports:
          - 80/tcp
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Apply Safer Runner Action (Enforce Mode)
        uses: ./
        with:
          mode: 'enforce'
          allowed-domains: 'api.github.com httpbin.org'
      
      - name: Test DNS resolution
        run: |
          echo "Testing DNS resolution..."
          dig api.github.com || echo "DNS resolution failed"
          dig httpbin.org || echo "Custom DNS resolution failed"
      
      - name: Test multiple protocols
        run: |
          echo "Testing HTTPS..."
          curl -I https://api.github.com || echo "HTTPS failed"
          
          echo "Testing HTTP (if allowed)..."
          curl -I http://httpbin.org/get || echo "HTTP failed (expected in enforce mode)"
      
      - name: Test localhost access
        run: |
          echo "Testing localhost DNS resolution..."
          timeout 5 dig localhost || { echo "Localhost DNS resolution failed"; exit 1; }

          echo "Testing localhost access to nginx service..."
          timeout 5 curl -I http://127.0.0.1:${{ job.services.nginx.ports['80'] }} || { echo "Localhost nginx failed"; exit 1; }

          echo "Testing localhost access to different port (should fail)..."
          timeout 5 curl -I http://127.0.0.1:9999 && echo "ERROR: Unexpected service responded!" || echo "SUCCESS: No service on port 9999 as expected"

      - name: Test direct IP address blocking
        run: |
          echo "Testing direct IP address communication blocking..."

          echo "Testing DNS query to Google DNS server 8.8.8.8 (should be blocked)..."
          timeout 1 dig @8.8.8.8 google.com && { echo "ERROR: Direct IP DNS query was allowed!"; exit 1; } || echo "SUCCESS: Direct IP DNS query blocked as expected"

          echo "Testing HTTP request to direct IP address (should be blocked)..."
          timeout 1 curl -I http://8.8.8.8 && { echo "ERROR: Direct IP HTTP request was allowed!"; exit 1; } || echo "SUCCESS: Direct IP HTTP request blocked as expected"

          echo "Testing HTTPS request to direct IP address (should be blocked)..."
          timeout 1 curl -I https://1.1.1.1 && { echo "ERROR: Direct IP HTTPS request was allowed!"; exit 1; } || echo "SUCCESS: Direct IP HTTPS request blocked as expected"
      
      - name: Check localhost test logs
        if: always()
        run: |
          echo "=== Localhost Test Logs ==="
          sudo grep -E 'Processing: |GitHub-Allow: |User-Allow: |Drop-Enforce: |Allow-Analyze: ' /var/log/syslog | tail -30 || echo "No localhost test logs found"
          
          echo "=== DNS Resolution Logs ==="
          sudo grep -E 'reply|NXDOMAIN|localhost' /var/log/syslog | tail -10 || echo "No DNS logs found"
      
      - name: Final security audit
        run: |
          echo "=== Final Security Audit ==="
          echo "Network Interfaces:"
          ip link show

          echo "Routing Table:"
          ip route show

          echo "Default Gateway Interface:"
          ip route get 8.8.8.8 | grep dev

          echo "IPTables rules:"
          sudo iptables -L OUTPUT -n -v | head -20

          echo "Active IPSets:"
          sudo ipset list github | head -10 || echo "GitHub ipset empty"
          sudo ipset list user | head -10 || echo "User ipset empty"

          echo "DNS Configuration:"
          cat /etc/resolv.conf

          echo "DNSMasq status:"
          sudo systemctl status dnsmasq --no-pager -l

  test-system-integrity:
    name: Test System Integrity Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Apply Safer Runner Action (Analyze Mode)
        uses: ./
        with:
          mode: 'analyze'
          allowed-domains: 'httpbin.org'
     
      - name: Start Falco
        uses: falcosecurity/falco-actions/start@c44e5c23b3cc1cb0a90e69cee21f14400207f818
        with:
          mode: live
          falco-version: '0.39.0'
          verbose: true

      - name: Verify baseline was captured
        run: |
          echo "=== Verifying baseline capture ==="
          if [ -f /tmp/safer-runner-validation-state.json ]; then
            echo "✅ Baseline file exists"
            echo "📋 Baseline contents:"
            sudo cat /tmp/safer-runner-validation-state.json | jq '.' || echo "Not valid JSON"
          else
            echo "❌ ERROR: Baseline file not found!"
            exit 1
          fi

      - name: Test normal operation (no tampering)
        run: |
          echo "=== Testing normal operation ==="
          echo "Making allowed network requests..."
          curl -I https://api.github.com || echo "GitHub API request failed"
          curl -I https://httpbin.org/get || echo "Custom domain request failed"

      - name: Verify system files exist
        run: |
          echo "=== Verifying critical system files ==="
          echo "Checking /etc/dnsmasq.conf..."
          if [ -f /etc/dnsmasq.conf ]; then
            echo "✅ dnsmasq.conf exists"
            echo "First 10 lines:"
            sudo head -10 /etc/dnsmasq.conf
          else
            echo "❌ ERROR: dnsmasq.conf missing!"
            exit 1
          fi

          echo "Checking /etc/resolv.conf..."
          if [ -f /etc/resolv.conf ]; then
            echo "✅ resolv.conf exists"
            cat /etc/resolv.conf
          else
            echo "❌ ERROR: resolv.conf missing!"
            exit 1
          fi

          echo "Checking systemd resolved config..."
          if [ -f /etc/systemd/resolved.conf.d/no-stub.conf ]; then
            echo "✅ no-stub.conf exists"
            sudo cat /etc/systemd/resolved.conf.d/no-stub.conf
          else
            echo "❌ ERROR: no-stub.conf missing!"
            exit 1
          fi

      - name: Test tampering detection (simulate file modification)
        run: |
          echo "=== Testing tampering detection ==="

          # Get original checksum for comparison
          echo "Original dnsmasq.conf checksum:"
          sudo sha256sum /etc/dnsmasq.conf

          # Simulate tampering by appending to dnsmasq.conf
          echo "# MALICIOUS MODIFICATION FOR TESTING" | sudo tee -a /etc/dnsmasq.conf

          echo "Modified dnsmasq.conf checksum:"
          sudo sha256sum /etc/dnsmasq.conf

          echo "File was tampered with - post-action should detect this!"

      - name: Check system logs for validation activity
        if: always()
        run: |
          echo "=== System Integrity Validation Logs ==="
          sudo grep -E 'Capturing|Verifying|integrity|baseline|checksum' /var/log/syslog | tail -20 || echo "No validation logs found in syslog"

          echo "=== Application Logs ==="
          # Look for our validation messages in GitHub Actions logs
          echo "Validation should appear in the action output above"

      - name: Final validation test
        run: |
          echo "=== Final validation summary ==="
          echo "✅ Baseline capture: Should be completed during action setup"
          echo "🔍 Tampering detection: Intentionally modified dnsmasq.conf"
          echo "📊 Validation report: Should show tampering in job summary"
          echo "🚨 Expected result: Post-action should detect and report tampering"
          echo ""
          echo "Check the job summary below for the System Integrity Validation Report!"
          echo "It should show ❌ Tampered status for /etc/dnsmasq.conf"

      - name: Stop Falco
        uses: falcosecurity/falco-actions/stop@c44e5c23b3cc1cb0a90e69cee21f14400207f818
        with:
          mode: live
          verbose: true

  test-vulnerable-action:
    name: Test CVE-2023-51664 Protection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Apply Safer Runner Action (Enforce Mode with Risky Subdomain Blocking)
        uses: ./
        with:
          mode: 'enforce'
          block-risky-github-subdomains: true

      - name: Run vulnerable tj-actions/changed-files@v41
        uses: tj-actions/changed-files@v41
        with:
          since_last_remote_commit: true
        continue-on-error: true

      - name: Check security logs
        if: always()
        run: |
          echo "=== CVE-2023-51664 Protection Logs ==="
          sudo grep -E 'Drop-Enforce: |NXDOMAIN' /var/log/syslog | tail -30 || echo "No block logs found"

          echo "=== DNS Blocking Logs ==="
          sudo grep -E 'gist.githubusercontent.com|raw.githubusercontent.com|attacker-domain' /var/log/syslog | tail -20 || echo "No DNS logs found"
